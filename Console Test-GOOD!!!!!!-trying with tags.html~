<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<title>Console Test</title>
<link href="Console%20Test_files/css.css" rel="stylesheet">
<style>
	#console{
		text-size:10pt;
		font-family: mono;
		color:#ffffff;
		background-color: #181e24;
		height:50%;
		width:50%;
		position:absolute;
		overflow-y:scroll;
		overflow-x:hidden;
		padding:10px;
	}

	//The following styles are taken from <OPEN SOURCE WEBSITE HERE>
	a {
		color: #00bbcc;
		text-decoration: none;
	}
	.a {
		color: #66b447;
	}
	.c {
		color: #00bbcc;
	}
	.b {
		color: #ff0096;
	}

</style>
</head>
<body>
<span>Hello <a href="file:///home/benjamin/Documents/Marianopolis/Robotics/2018/Page1.html">World</a></span>
	<div id="console" ,="" ondblclick="fillSection(info)">
		<span id="consoleArea"></span>
		<span id="cursor" style="opacity: 1;">|</span>
	</div>

	<script>
		var homeString="<span class=a>hackerman@marianopolis</span>:<span class=b>~</span><span class=c>$</span> ";
		var currentDir=homeString;
		var cleanHome="              hackerman@marianopolis       :              ~                     $        ";
		var info=`Marianonymous Robotics [kernel 5.778-4](c) 2018 Marianopolis College. All lefts reserved.<br style=line-height:1px>${cleanHome} ls <br><a id=\"game\", onclick=\"printLink(id)\", href=\"javascript:delay(\'game/game.html\')\">game/</a><br><a id=\"team\", href=\"team/team.html\"> team/</a><br><a id=\"robot\", href=\"robot/robot.html\"> robot/</a><br>${cleanHome} `;
		var cleanInfo=`Marianonymous Robotics [kernel 5.778-4](c) 2018 Marianopolis College. All lefts reserved.<br style=line-height:1px>${currentDir} ls <br>                                                                                         game/    <br>                                         team/    <br>                                            robot/    <br>${currentDir} `;
		var homeString="<br><span id=a>hackerman@marianopolis</span>:<span id=b>~</span><span id=c>$</span> ";

		var availableTagsRaw="<span class=a></span><span class=b></span><span class=c></span><a id=\"game\", onclick=\"printLink(id)\", href=\"javascript:delay(\'game/game.html\')\"></a><a id=\"team\", href=\"team/team.html\"></a><a id=\"robot\", href=\"robot/robot.html\"></a><span class=a></span><span class=b></span><span class=c></span>"
		var availableTags=[
			{
				tag:"<span class=a>",
				linkClass:"a",
				ocurrences:2
			},
			{
				tag:"<span class=b>",
				linkClass:"b",
				ocurrences:2
			},
			{
				tag:"<span class=c>",
				linkClass:"c",
				ocurrences:2
			},
			{
				tag:"<a id=\"game\", onclick=\"printLink(id)\", href=\"javascript:delay(\'game/game.html\')\">",
				id:"game",
				ocurrences:1
			},
			{
				tag:"<a id=\"team\", href=\"team/team.html\">",
				id:"team",
				ocurrences:1
			},
			{
				tag:"<a id=\"robot\", href=\"robot/robot.html\">",
				id:"robot",
				ocurrences:1
			}
		];

		var availableClasses=["a","b","c"];
		var availableIDs=["game","team","robot"];

		var availableIdentifiers=[availableClasses,availableIDs,availableClasses]

		function Tag(type,opening,closing,startOfContent,endOfContent, contentLength, id,tagClass){
			this.type=type;
			this.opening=opening;
			this.closing=closing;
			this.startOfContent=startOfContent;
			this.endOfContent=endOfContent;
			this.contentLength=contentLength;
			this.id=id;
			this.tagClass=tagClass;
		}

		var tags=[];

		function getRangeOfTags(){
			var lastIndexSearched=0;
			for (var i=0; i<availableTags.length; i++){
				for (var j=1; j<=availableTags[i].ocurrences; j++){
					var typeOfTag=availableTags[i].tag.split(" ")[0].slice(1);
					console.log(typeOfTag);
					var closingTag="</"+typeOfTag+">";
					console.log(closingTag);

					//Now, to find the ranges...
					var startOfTag=info.indexOf(availableTags[i].tag,lastIndexSearched);
					var startOfContent=info.indexOf(">",startOfTag)+1;

					lastIndexSearched=startOfContent;

					var endOfContent=info.indexOf(closingTag, startOfContent);
					var contentLength=endOfContent-startOfContent;

					var tag;
					if (availableTags[i].id==null) tag=new Tag(typeOfTag,availableTags[i],closingTag,startOfContent,endOfContent, contentLength, null, availableTags[i].linkClass);
					else tag=new Tag(typeOfTag,availableTags[i],closingTag,startOfContent,endOfContent,contentLength, availableTags[i].id,null);

					tags.push(tag);
				}
				lastIndexSearched=0;
			}

		}

		function characterIsInTag(characterIndex){
			var possibleTags=[];
			var finalTag=new Tag(null,null,null,null,null,null,"consoleArea",null);
			for (var i=0; i<tags.length;i++){
				var tag=tags[i];
				if (characterIndex>=tag.startOfContent && characterIndex<=tag.endOfContent){
					if (tag.id==null) console.log(tag.linkClass);
					else console.log(tag.id);
					possibleTags.push(tag);
				}
			}
			
			if (possibleTags.length>1){
				var tagLengths=[]
				for (var i=0; i<possibleTags.length;i++){
					tagLengths.push(possibleTags[i].contentLength);
				}
				//Find the shortest one --> It will be in the shortest one
				var shortestLength=Math.min.apply(null, tagLengths);
				for (var i=0; i<possibleTags.length;i++){
					if (possibleTags[i].contentLength==shortestLength){
						finalTag=possibleTags[i];
						console.log(possibleTags[i].opening.tag);
						break;
					}
				}
			} else {
				finalTag=possibleTags[0];
			}
			
			return finalTag;

		}

		function fillSection(text){
			getRangeOfTags();
			var repeatFunction=setInterval(addNextLetter, 50);
			var sectionToFill=document.getElementById("consoleArea");
			var cursor=document.getElementById("cursor");
			//cursor.style.opacity=1;
			var fullText=sectionToFill.innerHTML+text;

			var completedLetters=0;
			var printingComplete=false;
			var flashCursor;
			var selectedTag;
			
			//generate tags
			sectionToFill.innerHTML=availableTagsRaw;

			function cursorFlash(){
				var cursorOpacity;
				switch (cursor.style.opacity){
					case "0":
						cursorOpacity=1;
						break;
					case "1":
						cursorOpacity=0;
						break;
					default:
						cursorOpacity=1;

				}
				cursor.style.opacity=cursorOpacity.toFixed();

			}

			function addNextLetter(){
				clearInterval(flashCursor);
				var selectedTag=new Tag(null,null,null,null,null,null,"consoleArea",null);
				function getSelectedTag(charNum){
					this.type=new characterIsInTag(charNum).type;
					this.opening=new characterIsInTag(charNum).opening;
					this.closing=new characterIsInTag(charNum).closing;
					this.startOfContent=new characterIsInTag(charNum).startOfContent;
					this.endOfContent=new characterIsInTag(charNum).endOfContent;
					this.contentLength=new characterIsInTag(charNum).contentLength;
					this.id=new characterIsInTag(charNum).id;
					this.tagClass=new characterIsInTag(charNum).tagClass;
				};
				
				selectedTag=new getSelectedTag(completedLetters);
				if (selectedTag.type==null) selectedTag=new Tag(null,null,null,null,null,null,"consoleArea",null);
				else if (selectedTag.id==null){
					var possibleTags=document.getElementsByClassName(selectedTag.linkClass);
					var selectedTagIndex;
					for (var i=0; i<possibleTags.length; i++){
						var tag=possibleTags[i];
						if (completedLetters>=tag.startOfContent && completedLetters<=tag.endOfContent){
						selectedTagIndex=i;
						break;
						}
					}
					sectionToFill=document.getElementsByClassName(selectedTag.linkClass)[selectedTagIndex];
			
				}
				else{
					var selectedId=selectedTag.id;
					sectionToFill=document.getElementById(selectedId);
				}
				//var tagBeginning;
				//var tagEnd;
				console.log(sectionToFill);
				if (completedLetters>=text.length){
					sectionToFill.innerHTML=fullText;
					clearInterval(repeatFunction);
					//flashCursor=setInterval(cursorFlash,5);
					printingComplete=true;
				}else{
					if (text[completedLetters] != "<"){
					cursor.style.opacity=0;
					sectionToFill.innerHTML+=text[completedLetters];
					completedLetters++;
					//cursor.style.opacity=1;
					}
					else if (text[completedLetters] == "<"){
						//Add the html tags separately
						var substringOfTextLeft=text.substring(completedLetters);
						var indexOfClosing=substringOfTextLeft.indexOf(">");
						var textToAdd=substringOfTextLeft.slice(0,indexOfClosing+1);
						sectionToFill.innerHTML+=textToAdd;

						var newIndex=text.indexOf(">",completedLetters);

						completedLetters=newIndex+1;
					}
					//Now, how to figure out the tags... A possibility is to figure out the id of the tag, and then have it add to that tag... quite the idea, especially since we can perform a search for the text "id", and thus ignore the
					printingComplete=false;
				}
				startCursor();
			}


			function startCursor(){
				if (printingComplete) flashCursor=setInterval(cursorFlash,500);
				else {}

			}
			//var flashCursor=setInterval(cursorFlash, 15);
			//cursor.style.opacity=1;

		}

		function printLink(linkID){
			var textToPrint=document.getElementById(linkID).innerText;
			var newDir=homeString.replace("~",`~/${linkID}`);
			currentDir=newDir;
			fillSection(`cd ${linkID}<br>Changing directories to \"${linkID}\"<br>${currentDir}`);
		}

		function delay(url){
			setTimeout(function(){window.location=url}, 4000);
		}
	</script>


</body></html>
